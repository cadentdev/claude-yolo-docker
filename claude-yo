#!/bin/bash

# Parse arguments
REBUILD=false
VERBOSE=false
DEBUG=false
for arg in "$@"; do
  case $arg in
    -h|--help)
      echo "Usage: claude-yo [OPTIONS]"
      echo ""
      echo "Run Claude Code in an isolated Docker container with YOLO mode enabled."
      echo ""
      echo "Options:"
      echo "  -r, --rebuild    Force rebuild of Docker image from scratch (clears cache)"
      echo "  -v, --verbose    Enable verbose mode with full session logging"
      echo "  -d, --debug      Enable debug mode with persistent container shell"
      echo "  -h, --help       Display this help message"
      echo ""
      echo "The container will mount your current directory as the workspace."
      echo "Authentication data persists across runs in a Docker volume."
      echo ""
      echo "Examples:"
      echo "  claude-yo                      # Fast workflow (default)"
      echo "  claude-yo --verbose            # Full session logging"
      echo "  claude-yo --debug              # Persistent shell for exploration"
      echo "  claude-yo --debug --verbose    # Persistent shell + full logging"
      echo "  claude-yo --rebuild            # Update to latest Claude Code"
      echo ""
      echo "All sessions are logged to: ~/.claude-yolo/logs/claude-yolo-TIMESTAMP.log"
      echo "For detailed mode documentation, see the README.md file."
      exit 0
      ;;
    -r|--rebuild)
      REBUILD=true
      shift
      ;;
    -v|--verbose)
      VERBOSE=true
      shift
      ;;
    -d|--debug)
      DEBUG=true
      shift
      ;;
    *)
      echo "Unknown option: $arg"
      echo "Use --help for usage information"
      exit 1
      ;;
  esac
done

# Setup logging
LOG_DIR="$HOME/.claude-yolo/logs"
mkdir -p "$LOG_DIR"
TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
LOGFILE="$LOG_DIR/claude-yolo-$TIMESTAMP.log"

# Log function for wrapper messages
log_message() {
  echo "$@" | tee -a "$LOGFILE"
}

# Get host user info
USERID=$(id -u)
GROUPID=$(id -g)
USERNAME=$(whoami)
MOUNTDIR=$(pwd)
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

# Notify user of log location
log_message "Session log: $LOGFILE"

# Handle rebuild or normal build
if [ "$REBUILD" = true ]; then
  log_message "Removing existing image..."
  docker rmi claude-yolo:latest 2>&1 | tee -a "$LOGFILE" || true
  log_message "Building image from scratch (no cache)..."
  if ! docker build --no-cache -t claude-yolo:latest "$SCRIPT_DIR" 2>&1 | tee -a "$LOGFILE"; then
    log_message "Error: Docker build failed. Please check the error messages above."
    exit 1
  fi
  log_message "Build complete!"
elif [[ "$(docker images -q claude-yolo:latest 2> /dev/null)" == "" ]]; then
  log_message "Building Docker image (first run only)..."
  if ! docker build -t claude-yolo:latest "$SCRIPT_DIR" 2>&1 | tee -a "$LOGFILE"; then
    log_message "Error: Docker build failed. Please check the error messages above."
    exit 1
  fi
  log_message "Build complete!"
fi

# Log container setup information to file only (container will display on console)
# This avoids duplicate output since the container script always shows this info
echo "═══════════════════════════════════════════════════════════════" >> "$LOGFILE"
echo "Container Setup" >> "$LOGFILE"
echo "═══════════════════════════════════════════════════════════════" >> "$LOGFILE"
echo "Container user:      $USERNAME" >> "$LOGFILE"
echo "UID:GID:             $USERID:$GROUPID" >> "$LOGFILE"
echo "Working directory:   $MOUNTDIR" >> "$LOGFILE"
echo "                     → mounted at /workspace" >> "$LOGFILE"
echo "═══════════════════════════════════════════════════════════════" >> "$LOGFILE"

# Run the container (behavior depends on debug and verbose flags)
if [ "$DEBUG" = true ]; then
  if [ "$VERBOSE" = true ]; then
    # Mode 4: Debug + Verbose (persistent shell, full logging)
    log_message "Debug + Verbose mode enabled - full session logged, container persists"

    if command -v script &> /dev/null; then
      script -q -f -c "docker run \
        -v \"$MOUNTDIR\":/workspace \
        -v claude-yolo-home:/home-persist \
        -it \
        --rm \
        claude-yolo:latest \
        /bin/bash -c \"
          # Find if a user with our UID already exists
          EXISTING_USER=\\\$(getent passwd $USERID | cut -d: -f1)

          if [ -n \\\"\\\$EXISTING_USER\\\" ]; then
            CONTAINER_USER=\\\$EXISTING_USER
          else
            CONTAINER_USER=$USERNAME
            groupadd -g $GROUPID \\\$CONTAINER_USER 2>/dev/null || true
            useradd -u $USERID -g $GROUPID -m -s /bin/bash \\\$CONTAINER_USER
          fi

          # Restore home directory from persistent volume if it exists
          if [ -d /home-persist/\\\$CONTAINER_USER ]; then
            cp -a /home-persist/\\\$CONTAINER_USER/. /home/\\\$CONTAINER_USER/
          fi

          # Display setup information with prompt
          echo \\\"═══════════════════════════════════════════════════════════════\\\"
          echo \\\"Container Setup Complete\\\"
          echo \\\"═══════════════════════════════════════════════════════════════\\\"
          echo \\\"Container user:      \\\$CONTAINER_USER\\\"
          echo \\\"UID:GID:             $USERID:$GROUPID\\\"
          echo \\\"Working directory:   $MOUNTDIR\\\"
          echo \\\"                     → mounted at /workspace\\\"
          echo \\\"═══════════════════════════════════════════════════════════════\\\"
          echo \\\"\\\"
          echo \\\"Press Enter to start Claude Code with --dangerously-skip-permissions\\\"
          read

          # Run Claude
          su - \\\$CONTAINER_USER -c 'cd /workspace && claude --dangerously-skip-permissions'

          # Drop to persistent debug shell
          echo \\\"\\\"
          echo \\\"═══════════════════════════════════════════════════════════════\\\"
          echo \\\"Claude exited. Starting debug shell...\\\"
          echo \\\"═══════════════════════════════════════════════════════════════\\\"
          echo \\\"You are now in the container as \\\$CONTAINER_USER\\\"
          echo \\\"Working directory: /workspace\\\"
          echo \\\"\\\"
          echo \\\"Type 'exit' to save your home directory and leave the container.\\\"
          echo \\\"═══════════════════════════════════════════════════════════════\\\"
          echo \\\"\\\"

          su -l \\\$CONTAINER_USER

          # Save home directory AFTER user exits
          echo \\\"Saving authentication data...\\\"
          mkdir -p /home-persist/\\\$CONTAINER_USER
          cp -a /home/\\\$CONTAINER_USER/. /home-persist/\\\$CONTAINER_USER/
          echo \\\"Done. Exiting container.\\\"
        \"" "$LOGFILE"
    else
      # Fallback without script command
      log_message "Warning: 'script' command not found. Docker session output will not be logged."
      docker run \
        -v "$MOUNTDIR":/workspace \
        -v claude-yolo-home:/home-persist \
        -it \
        --rm \
        claude-yolo:latest \
        /bin/bash -c "
          # Find if a user with our UID already exists
          EXISTING_USER=\$(getent passwd $USERID | cut -d: -f1)

          if [ -n \"\$EXISTING_USER\" ]; then
            CONTAINER_USER=\$EXISTING_USER
          else
            CONTAINER_USER=$USERNAME
            groupadd -g $GROUPID \$CONTAINER_USER 2>/dev/null || true
            useradd -u $USERID -g $GROUPID -m -s /bin/bash \$CONTAINER_USER
          fi

          # Restore home directory from persistent volume if it exists
          if [ -d /home-persist/\$CONTAINER_USER ]; then
            cp -a /home-persist/\$CONTAINER_USER/. /home/\$CONTAINER_USER/
          fi

          # Display setup information with prompt
          echo \"═══════════════════════════════════════════════════════════════\"
          echo \"Container Setup Complete\"
          echo \"═══════════════════════════════════════════════════════════════\"
          echo \"Container user:      \$CONTAINER_USER\"
          echo \"UID:GID:             $USERID:$GROUPID\"
          echo \"Working directory:   $MOUNTDIR\"
          echo \"                     → mounted at /workspace\"
          echo \"═══════════════════════════════════════════════════════════════\"
          echo \"\"
          echo \"Press Enter to start Claude Code with --dangerously-skip-permissions\"
          read

          # Run Claude
          su - \$CONTAINER_USER -c 'cd /workspace && claude --dangerously-skip-permissions'

          # Drop to persistent debug shell
          echo \"\"
          echo \"═══════════════════════════════════════════════════════════════\"
          echo \"Claude exited. Starting debug shell...\"
          echo \"═══════════════════════════════════════════════════════════════\"
          echo \"You are now in the container as \$CONTAINER_USER\"
          echo \"Working directory: /workspace\"
          echo \"\"
          echo \"Type 'exit' to save your home directory and leave the container.\"
          echo \"═══════════════════════════════════════════════════════════════\"
          echo \"\"

          su -l \$CONTAINER_USER

          # Save home directory AFTER user exits
          echo \"Saving authentication data...\"
          mkdir -p /home-persist/\$CONTAINER_USER
          cp -a /home/\$CONTAINER_USER/. /home-persist/\$CONTAINER_USER/
          echo \"Done. Exiting container.\"
        "
    fi
  else
    # Mode 3: Debug only (persistent shell, no full logging)
    log_message "Debug mode enabled - container will persist after Claude exits"

    docker run \
      -v "$MOUNTDIR":/workspace \
      -v claude-yolo-home:/home-persist \
      -it \
      --rm \
      claude-yolo:latest \
      /bin/bash -c "
        # Find if a user with our UID already exists
        EXISTING_USER=\$(getent passwd $USERID | cut -d: -f1)

        if [ -n \"\$EXISTING_USER\" ]; then
          CONTAINER_USER=\$EXISTING_USER
        else
          CONTAINER_USER=$USERNAME
          groupadd -g $GROUPID \$CONTAINER_USER 2>/dev/null || true
          useradd -u $USERID -g $GROUPID -m -s /bin/bash \$CONTAINER_USER
        fi

        # Restore home directory from persistent volume if it exists
        if [ -d /home-persist/\$CONTAINER_USER ]; then
          cp -a /home-persist/\$CONTAINER_USER/. /home/\$CONTAINER_USER/
        fi

        # Display setup information with prompt
        echo \"═══════════════════════════════════════════════════════════════\"
        echo \"Container Setup Complete\"
        echo \"═══════════════════════════════════════════════════════════════\"
        echo \"Container user:      \$CONTAINER_USER\"
        echo \"UID:GID:             $USERID:$GROUPID\"
        echo \"Working directory:   $MOUNTDIR\"
        echo \"                     → mounted at /workspace\"
        echo \"═══════════════════════════════════════════════════════════════\"
        echo \"\"
        echo \"Press Enter to start Claude Code with --dangerously-skip-permissions\"
        read

        # Run Claude
        su - \$CONTAINER_USER -c 'cd /workspace && claude --dangerously-skip-permissions'

        # Drop to persistent debug shell
        echo \"\"
        echo \"═══════════════════════════════════════════════════════════════\"
        echo \"Claude exited. Starting debug shell...\"
        echo \"═══════════════════════════════════════════════════════════════\"
        echo \"You are now in the container as \$CONTAINER_USER\"
        echo \"Working directory: /workspace\"
        echo \"\"
        echo \"Type 'exit' to save your home directory and leave the container.\"
        echo \"═══════════════════════════════════════════════════════════════\"
        echo \"\"

        su -l \$CONTAINER_USER

        # Save home directory AFTER user exits
        echo \"Saving authentication data...\"
        mkdir -p /home-persist/\$CONTAINER_USER
        cp -a /home/\$CONTAINER_USER/. /home-persist/\$CONTAINER_USER/
        echo \"Done. Exiting container.\"
      "
  fi
else
  if [ "$VERBOSE" = true ]; then
    # Mode 2: Verbose only (no persistent shell, full logging)
    log_message "Verbose mode enabled - full session will be logged"

    if command -v script &> /dev/null; then
      script -q -f -c "docker run \
        -v \"$MOUNTDIR\":/workspace \
        -v claude-yolo-home:/home-persist \
        -it \
        --rm \
        claude-yolo:latest \
        /bin/bash -c \"
          # Find if a user with our UID already exists
          EXISTING_USER=\\\$(getent passwd $USERID | cut -d: -f1)

          if [ -n \\\"\\\$EXISTING_USER\\\" ]; then
            CONTAINER_USER=\\\$EXISTING_USER
          else
            CONTAINER_USER=$USERNAME
            groupadd -g $GROUPID \\\$CONTAINER_USER 2>/dev/null || true
            useradd -u $USERID -g $GROUPID -m -s /bin/bash \\\$CONTAINER_USER
          fi

          # Restore home directory from persistent volume if it exists
          if [ -d /home-persist/\\\$CONTAINER_USER ]; then
            cp -a /home-persist/\\\$CONTAINER_USER/. /home/\\\$CONTAINER_USER/
          fi

          # Display setup information with prompt
          echo \\\"═══════════════════════════════════════════════════════════════\\\"
          echo \\\"Container Setup Complete\\\"
          echo \\\"═══════════════════════════════════════════════════════════════\\\"
          echo \\\"Container user:      \\\$CONTAINER_USER\\\"
          echo \\\"UID:GID:             $USERID:$GROUPID\\\"
          echo \\\"Working directory:   $MOUNTDIR\\\"
          echo \\\"                     → mounted at /workspace\\\"
          echo \\\"═══════════════════════════════════════════════════════════════\\\"
          echo \\\"\\\"
          echo \\\"Press Enter to start Claude Code with --dangerously-skip-permissions\\\"
          read

          # Run Claude and EXIT (no debug shell)
          su - \\\$CONTAINER_USER -c 'cd /workspace && claude --dangerously-skip-permissions'

          # Save home directory
          mkdir -p /home-persist/\\\$CONTAINER_USER
          cp -a /home/\\\$CONTAINER_USER/. /home-persist/\\\$CONTAINER_USER/
        \"" "$LOGFILE"
    else
      # Fallback without script command
      log_message "Warning: 'script' command not found. Docker session output will not be logged."
      docker run \
        -v "$MOUNTDIR":/workspace \
        -v claude-yolo-home:/home-persist \
        -it \
        --rm \
        claude-yolo:latest \
        /bin/bash -c "
          # Find if a user with our UID already exists
          EXISTING_USER=\$(getent passwd $USERID | cut -d: -f1)

          if [ -n \"\$EXISTING_USER\" ]; then
            CONTAINER_USER=\$EXISTING_USER
          else
            CONTAINER_USER=$USERNAME
            groupadd -g $GROUPID \$CONTAINER_USER 2>/dev/null || true
            useradd -u $USERID -g $GROUPID -m -s /bin/bash \$CONTAINER_USER
          fi

          # Restore home directory from persistent volume if it exists
          if [ -d /home-persist/\$CONTAINER_USER ]; then
            cp -a /home-persist/\$CONTAINER_USER/. /home/\$CONTAINER_USER/
          fi

          # Display setup information with prompt
          echo \"═══════════════════════════════════════════════════════════════\"
          echo \"Container Setup Complete\"
          echo \"═══════════════════════════════════════════════════════════════\"
          echo \"Container user:      \$CONTAINER_USER\"
          echo \"UID:GID:             $USERID:$GROUPID\"
          echo \"Working directory:   $MOUNTDIR\"
          echo \"                     → mounted at /workspace\"
          echo \"═══════════════════════════════════════════════════════════════\"
          echo \"\"
          echo \"Press Enter to start Claude Code with --dangerously-skip-permissions\"
          read

          # Run Claude and EXIT (no debug shell)
          su - \$CONTAINER_USER -c 'cd /workspace && claude --dangerously-skip-permissions'

          # Save home directory
          mkdir -p /home-persist/\$CONTAINER_USER
          cp -a /home/\$CONTAINER_USER/. /home-persist/\$CONTAINER_USER/
        "
    fi
  else
    # Mode 1: Default (no persistent shell, no full logging)
    docker run \
      -v "$MOUNTDIR":/workspace \
      -v claude-yolo-home:/home-persist \
      -it \
      --rm \
      claude-yolo:latest \
      /bin/bash -c "
        # Find if a user with our UID already exists
        EXISTING_USER=\$(getent passwd $USERID | cut -d: -f1)

        if [ -n \"\$EXISTING_USER\" ]; then
          CONTAINER_USER=\$EXISTING_USER
        else
          CONTAINER_USER=$USERNAME
          groupadd -g $GROUPID \$CONTAINER_USER 2>/dev/null || true
          useradd -u $USERID -g $GROUPID -m -s /bin/bash \$CONTAINER_USER
        fi

        # Restore home directory from persistent volume if it exists
        if [ -d /home-persist/\$CONTAINER_USER ]; then
          cp -a /home-persist/\$CONTAINER_USER/. /home/\$CONTAINER_USER/
        fi

        # Display setup information (no prompt in default mode)
        echo \"═══════════════════════════════════════════════════════════════\"
        echo \"Container Setup Complete\"
        echo \"═══════════════════════════════════════════════════════════════\"
        echo \"Container user:      \$CONTAINER_USER\"
        echo \"UID:GID:             $USERID:$GROUPID\"
        echo \"Working directory:   $MOUNTDIR\"
        echo \"                     → mounted at /workspace\"
        echo \"═══════════════════════════════════════════════════════════════\"
        echo \"\"
        echo \"Starting Claude Code with --dangerously-skip-permissions...\"
        echo \"\"

        # Run Claude and EXIT (no debug shell)
        su - \$CONTAINER_USER -c 'cd /workspace && claude --dangerously-skip-permissions'

        # Save home directory
        mkdir -p /home-persist/\$CONTAINER_USER
        cp -a /home/\$CONTAINER_USER/. /home-persist/\$CONTAINER_USER/
      "
  fi
fi
